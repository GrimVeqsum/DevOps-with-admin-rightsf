using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using System.Collections.Concurrent;
using System.Text;
using DinoServer.Users;
using Microsoft.EntityFrameworkCore;
using Telegram.Bot.Polling;
using System.Diagnostics.CodeAnalysis;

namespace DinoServer;

public static class TelegramService
{
    private static string token = "8282986498:AAGSV11RSyUkl8uGWPTdh8oRelIJwEvdbSg";
    private static TelegramBotClient? _bot;
    private static readonly ConcurrentDictionary<long, bool> _chatIds = new(); // –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ chatId
    private static CancellationTokenSource? _cts;
    private static IDbContextFactory<UserContext> _contextFactory;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    [ExcludeFromCodeCoverage]
    public static void Initialize(IDbContextFactory<UserContext> contextFactory)
    {
        _contextFactory = contextFactory;
        
        if (_bot != null) return; // —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω

        _bot = new TelegramBotClient(token);
        _cts = new CancellationTokenSource();

        _bot.StartReceiving(
            HandleUpdateAsync,
            HandleErrorAsync,
            new ReceiverOptions { AllowedUpdates = Array.Empty<UpdateType>() },
            cancellationToken: _cts.Token
        );
    }

    [ExcludeFromCodeCoverage]
    private static async Task HandleUpdateAsync(ITelegramBotClient bot, Update update, CancellationToken token)
    {
        if (update.Type == UpdateType.Message && update.Message != null)
        {
            Console.WriteLine($"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.Message.Text}");
            var chatId = update.Message.Chat.Id;
            _chatIds.TryAdd(chatId, true); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ—Ö, –∫—Ç–æ –ø–∏—Å–∞–ª –±–æ—Ç—É

            var text = update.Message.Text?.Trim();

            if (text == "/top")
            {
                try
                {
                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
                    var leaderboard = await BuildLeaderboardAsync();
                    await bot.SendTextMessageAsync(chatId, leaderboard);
                }
                catch (Exception ex)
                {
                    await bot.SendTextMessageAsync(chatId, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {ex.Message}");
                }
            }
        }
    }

    [ExcludeFromCodeCoverage]
    private static Task HandleErrorAsync(ITelegramBotClient bot, Exception exception, CancellationToken token)
    {
        Console.WriteLine($"Telegram error: {exception.Message}");
        return Task.CompletedTask;
    }

    // –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
    [ExcludeFromCodeCoverage]
    public static async Task SendMessage(string message)
    {
        if (_bot == null)
        {
            Console.WriteLine("TelegramService not initialized!");
            return;
        }

        foreach (var chatId in _chatIds.Keys)
        {
            try
            {
                await _bot.SendTextMessageAsync(chatId, message);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to send to {chatId}: {ex.Message}");
            }
        }
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    public static void Stop()
    {
        _cts?.Cancel();
    }
    
    private static async Task<string> BuildLeaderboardAsync()
    {
        // –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å DI, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–¥–∞–¥–∏–º —Ñ–∞–±—Ä–∏–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        await using var db = _contextFactory.CreateDbContext(); // <-- –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—é —Ñ–∞–±—Ä–∏–∫—É –∏–ª–∏ —Å–µ—Ä–≤–∏—Å
        var users = await db.Users
            .OrderByDescending(u => u.Score)
            .Take(10) // —Ç–æ–ø-10
            .ToListAsync();

        if (!users.Any()) return "–õ–∏–¥–µ—Ä—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.";

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ò–º—è | –°—á—ë—Ç"
        var sb = new StringBuilder();
        sb.AppendLine("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:");
        sb.AppendLine("–ò–º—è | –°—á—ë—Ç");
        sb.AppendLine("-------------");
        foreach (var u in users)
        {
            sb.AppendLine($"{u.Name} | {u.Score}");
        }

        return sb.ToString();
    }
}
